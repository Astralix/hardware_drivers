#!/bin/bash

# This script runs a single test case or all test cases
# The tests can be run with ARM simulator or executable binary
# For simulator, the input is ASIC reference data generated by system model

#Set this for HW testing
# HW burst size 0..63
burst=16

#MPEGDEC=mpeg4dec


if [ -s "test_data_parameter_mpeg4.sh" ] ; then
    TEST_PARAMETER=test_data_parameter_mpeg4.sh
else
    TEST_PARAMETER=customer_data_parameter_mpeg4.sh
fi

ref_enc_bin=$SYSTEM_MODEL_HOME/mpeg4_testenc
if [ ! -e $ref_enc_bin ]; then
    echo "Executable $ref_enc_bin not found. Compile with 'make'"
    exit
fi

enc_bin=./omxenctest
if [ ! -e $enc_bin ]; then
    echo "Executable $enc_bin not found. Compile with 'make'"
    exit
fi

# Output file when running all cases
# .log and .txt are created
resultfile=results_mpeg4

# Current date
date=`date +"%d.%m.%y %k:%M"`

# Check parameter
if [ $# -eq 0 ]; then
    echo "Usage: test_mpeg4.sh <test_case_number>"
    echo "   or: test_mpeg4.sh <all>"
    echo "   or: test_mpeg4.sh <first_case> <last_case>"
    exit
fi

# Encoder command
# For armsd-simulator the command line must be less than 300 characters
# The userdata parameters should be commented out to achieve that
encode() {
    omxStabilization=
    if [ ${stabilization[${set_nro}]} -eq 1 ] ; then
        omxStabilization=-Z
        omxLastVop="$[${lastVop[${set_nro}]}+1]"
    else
        omxLastVop=${lastVop[${set_nro}]}
    fi

        omxRVLC=
    if [ ${rvlc[${set_nro}]} -eq 1 ] ; then
        omxRVLC=-R
    fi
        omxHEC=
    if [ ${hec[${set_nro}]} -eq 1 ] ; then
           omxHEC=-E
    fi

    if [ ${bitPerSecond[${set_nro}]} -ne 0 ] ; then
       omxBitrate=-B' '${bitPerSecond[${set_nro}]}
    fi

    if [ ${mbRc[${set_nro}]} -eq 1 ] ; then
        omxRateControl='-C constant'
    fi

    omxRotation=0
    case "${rotation[$set_nro]}" in
        1) {
                omxRotation=90
            };;
        2) {
                omxRotation=270
            };;
        * )
    esac

    omxProfile='-p 0x400 -L 0x80'
    case "${profile[$set_nro]}" in

        # MPEG4 profile & level
        1) {
                omxProfile='-p 0x001 -L 0x04'
            };;
        2) {
                omxProfile='-p 0x001 -L 0x08'
            };;
        3) {
                omxProfile='-p 0x001 -L 0x10'
            };;
        4) {
                omxProfile='-p 0x001 -L 0x40'
            };;
        5) {
                omxProfile='-p 0x001 -L 0x80'
            };;
        8) {
                omxProfile='-p 0x001 -L 0x01'
            };;
        9) {
                omxProfile='-p 0x001 -L 0x02'
            };;
        52) {
                omxProfile='-p 0x008 -L 0x20'
            };;
        243) {
                omxProfile='-p 0x400 -L 0x10'
            };;
        244) {
                omxProfile='-p 0x400 -L 0x20'
            };;
        245) {
                omxProfile='-p 0x400 -L 0x80'
            };;

        # H263 profile & level
        1001) {
                omxProfile='-p 0x1 -L 0x01'
            };;
        1002) {
                omxProfile='-p 0x1 -L 0x02'
            };;
        1003) {
                omxProfile='-p 0x1 -L 0x04'
            };;
        1004) {
                omxProfile='-p 0x1 -L 0x08'
            };;
        1005) {
                omxProfile='-p 0x1 -L 0x20'
            };;
        1006) {
                omxProfile='-p 0x1 -L 0x40'
            };;
        1007) {
                omxProfile='-p 0x1 -L 0x80'
            };;
	    * )
    esac

    omxScheme=mpeg4
    case "${scheme[$set_nro]}" in
        0) {
                omxScheme=mpeg4
            };;
        1) {
                omxScheme=TBD
            };;
        3) {
                omxScheme=h263
            };;
	    * )
    esac

    omxnPFrames=0
    if [ ${intraVopRate[${set_nro}]} -gt 0 ] ; then
        let "omxnPFrames=${intraVopRate[${set_nro}]}"
    else
        omxnPFrames=128
    fi

    omxGOVEnabled=0
    if [ ${omxnPFrames} -gt 0 ] ; then
        if [ ${goVopRate[${set_nro}]} -gt 0 ] ; then
            omxGOVEnabled=-g
        fi
    fi

    let omxOutputRate=${outputRateNumer[${set_nro}]}/${outputRateDenom[${set_nro}]}
    let omxInputRate=${inputRateNumer[${set_nro}]}/${inputRateDenom[${set_nro}]}

    omxRateControl='-C constant'
    if [ ${mbRc[${set_nro}]} -eq 0 ] ; then
        if [ ${videoBufferSize[${set_nro}]} -eq 0 ]; then
            if [ ${vopSkip[${set_nro}]}  -eq 0 ]; then
                omxRateControl='-C variable'
            fi
        fi
    fi

    if [ ${mbRc[${set_nro}]} -eq 1 ] ; then
        if [ ${vopRc[${set_nro}]} -eq 1 ]; then
            omxRateControl='-C constant'
        fi
    fi

    if [ ${mbRc[${set_nro}]} -eq 0 ] ; then
        if [ ${vopRc[${set_nro}]} -eq 0 ]; then
            omxRateControl='-C disable'
        fi
    fi


    if [ ${mbRc[${set_nro}]} -eq 1 ] ; then
        if [ ${vopRc[${set_nro}]} -eq 1 ]; then
            if [ ${vopSkip[${set_nro}]}  -eq 1 ]; then
                omxRateControl='-C constant-skipframes'
            fi
        fi
    fi


    if [ ${mbRc[${set_nro}]} -eq 0 ] ; then
        if [ ${vopRc[${set_nro}]} -eq 1 ]; then
            if [ ${vopSkip[${set_nro}]}  -eq 1 ]; then
                omxRateControl='-C variable-skipframes'
            fi
        fi
    fi

    #create reference data
    ${ref_enc_bin} \
    --scheme ${scheme[$set_nro]} \
    --input ${input[${set_nro}]} \
    --output $TEST_DATA_HOME/case_${case_nro}/stream.mpeg4 \
    --lumWidthSrc ${lumWidthSrc[${set_nro}]} \
    --lumHeightSrc ${lumHeightSrc[${set_nro}]} \
    --outputRateNumer ${outputRateNumer[${set_nro}]} \
    --outputRateDenom ${outputRateDenom[${set_nro}]} \
    --inputRateNumer ${inputRateNumer[${set_nro}]} \
    --inputRateDenom ${inputRateDenom[${set_nro}]} \
    --rvlc ${rvlc[${set_nro}]}  \
    --hec ${hec[${set_nro}]} \
    --bitPerSecond ${bitPerSecond[${set_nro}]} \
    --qpHdr ${qpHdr[${set_nro}]} \
    --inputFormat ${inputFormat[${set_nro}]} \
    --rotation ${rotation[$set_nro]:=0} \
    --mbRc ${mbRc[${set_nro}]} \
    --width ${width[${set_nro}]} \
    --height ${height[${set_nro}]} \
    --horOffsetSrc ${horOffsetSrc[${set_nro}]} \
    --verOffsetSrc ${verOffsetSrc[${set_nro}]} \
    --profile ${profile[$set_nro]} \
    --intraVopRate ${intraVopRate[${set_nro}]:=0} \
    --goVopRate ${goVopRate[${set_nro}]:=0}  \
    --lastVop ${lastVop[${set_nro}]} \
    --vopRc ${vopRc[${set_nro}]} \
    --vopSkip ${vopSkip[${set_nro}]} \
    --cir 0 \
    --gobPlace 0 \
    --dataPart 0 \
    --vpSize 0 \
    --videoBufferSize 0 \
    --stabilization ${stabilization[${set_nro}]}

    ${enc_bin} \
    -O ${omxScheme} -s 6144000 \
    -i ${input[${set_nro}]} \
    -o stream.mpeg4 \
    -w ${lumWidthSrc[${set_nro}]} \
    -h ${lumHeightSrc[${set_nro}]} \
    -f ${omxOutputRate} \
    -j ${omxInputRate} \
       ${omxBitrate} \
    -V ${outputRateNumer[${set_nro}]} \
    -q ${qpHdr[${set_nro}]} \
    -l ${inputFormat[${set_nro}]} \
    -r ${omxRotation} \
       ${omxRateControl} \
    -x ${width[${set_nro}]} \
    -y ${height[${set_nro}]} \
    -X ${horOffsetSrc[${set_nro}]} \
    -Y ${verOffsetSrc[${set_nro}]} \
       ${omxProfile} \
    -n ${omxnPFrames} \
       ${omxGOVEnabled} \
    -b $omxLastVop \
       ${omxRVLC} \
       ${omxHEC} \
       ${omxStabilization}
}


compare() {
    if [ -s "stream.mpeg4" ]; then
        if cmp stream.mpeg4 $case_dir/stream.mpeg4; then
            echo "Case $case_nro OK"
            echo "E case_$case_nro;${category[${set_nro}]};${desc[${set_nro}]};OK;$USER"
            mv stream.mpeg4 ENC_CASE_$case_nro.mpeg4
        else
            echo "Case $case_nro FAILED"
            echo "E case_$case_nro;${category[${set_nro}]};${desc[${set_nro}]};Failed;$USER"
            mv stream.mpeg4 ENC_CASE_$case_nro.mpeg4

            if [ -s "$MPEGDEC" ]; then
                $MPEGDEC -Oref.yuv $case_dir/stream.mpeg4 >> ref.log
                $MPEGDEC -Oomx.yuv ENC_CASE_$case_nro.mpeg4 >> omx.log

                if cmp ref.yuv omx.yuv; then
                    echo "failed, Decoded outputs match"
                else
                    echo "failed, decoded outputs differ"
                fi
            fi
        fi
    else
        echo "Case $case_nro FAILED"
        echo "E case_$case_nro;${category[${set_nro}]};${desc[${set_nro}]};Failed, no output;$USER"
        echo "failed, stream.mpeg4 size 0 or file not found"
        mv stream.mpeg4 ENC_CASE_$case_nro.mpeg4
    fi
}

test_set() {
    # Test data dir
    let "set_nro=${case_nro}-${case_nro}/5*5"

    case_dir=$TEST_DATA_HOME/case_$case_nro
    echo "valid == ${valid[${set_nro}]}"

    # Do nothing if test case is not valid
    if [ ${valid[${set_nro}]} -eq -1 ]; then
        echo "case_$case_nro is not valid."
    else
        # Do nothing if test data doesn't exists
        if [ ! -e $case_dir ]; then
            mkdir $case_dir
        fi

        echo "========================================================="
        echo "Run case $case_nro"

        rm -f mb_control.bin rlc.bin stream.mpeg4

        echo "Input from directory $case_dir"

        # Run encoder
        encode > encoder_mpeg4.log
        cat encoder_mpeg4.log

        # Compare stream to reference
        compare
    fi
}

run_cases() {
    echo "Scanning for valid test cases in range $first_case..$last_case"
    echo "This may take several minutes"
    echo "Test report is stored in $resultfile.csv"

    rm -f $resultfile.log $resultfile.txt
    for ((case_nro=$first_case; case_nro<=$last_case; case_nro++))
    do
        . $TEST_PARAMETER "$case_nro"
        echo -en "\rCase $case_nro\t"
        test_set >> $resultfile.log
    done
    echo -e "\nAll done!"
    grep "E case_" $resultfile.log > $resultfile.csv
    grep "case" $resultfile.log > $resultfile.txt
    cat $resultfile.txt
}

run_case() {
    . $TEST_PARAMETER "$case_nro"
    test_set
}


# Encoder test set.
trigger=-1 # NO Logic analyzer trigger by default

case "$1" in
    all)
    first_case=1
    last_case=999
    run_cases;;

    *)
    if [ $# -eq 3 ]; then trigger=$3; fi
    if [ $# -eq 1 ]; then
        case_nro=$1;
        run_case;
    else
        first_case=$1;
        last_case=$2;
        run_cases;
    fi
    ;;
esac

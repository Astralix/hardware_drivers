#!/bin/bash

#Imports

.  ./f_run.sh

# import commonconfig
if [ ! -e masterscripts/commonconfig.sh ]
then
    echo "<commonconfig.sh> missing"
    exit 1
else
.  ./masterscripts/commonconfig.sh
fi

# This script runs a single test case or all test cases
# The tests can be run with ARM simulator or executable binary
# For simulator, the input is ASIC reference data generated by system model

mount_point=/export # this is for versatile
if [ ! -e $mount_point ]; then
    mount_point=/mnt/export # this is for integrator
fi

#SET THIS
# HW burst size 0..63
burst=16

# Output file when running all cases
# .log and .txt are created
resultfile=results_h264

# Current date
#date=`date +"%d.%m.%y %k:%M"`

# Check parameter
if [ $# -eq 0 ]; then
    echo "Usage: $0 <test_case_number>"
    echo "   or: $0 <all>"
    echo "   or: $0 <first_case> <last_case>"
    exit
fi

enc_bin=./h264_testenc
if [ ! -e $enc_bin ]; then
    echo "Executable $enc_bin not found. Compile with 'make'"
    exit
fi

if [ ! -e $test_case_list_dir/test_data_parameter_h264.sh ]; then
    echo "<test_data_parameter_h264.sh> not found"
    echo "$test_case_list_dir/test_data_parameter_h264.sh" 
    exit -1
fi

# Encoder command
# For armsd-simulator the command line must be less than 300 characters
encode() {

    ${enc_bin} \
    -L${level[${set_nro}]} \
    -i${input[${set_nro}]} \
    -a${firstVop[${set_nro}]} \
    -b${lastVop[${set_nro}]} \
    -w${lumWidthSrc[${set_nro}]} \
    -h${lumHeightSrc[${set_nro}]} \
    -x${width[${set_nro}]} \
    -y${height[${set_nro}]} \
    -X${horOffsetSrc[${set_nro}]} \
    -Y${verOffsetSrc[${set_nro}]} \
    -f${outputRateNumer[${set_nro}]} \
    -F${outputRateDenom[${set_nro}]} \
    -j${inputRateNumer[${set_nro}]} \
    -J${inputRateDenom[${set_nro}]} \
    -T${constIntraPred[${set_nro}]} \
    -D${disableDeblocking[${set_nro}]} \
    -I${intraVopRate[${set_nro}]} \
    -V${mbPerSlice[${set_nro}]} \
    -B${bitPerSecond[${set_nro}]} \
    -U${vopRc[${set_nro}]} \
    -u${mbRc[${set_nro}]} \
    -s${vopSkip[${set_nro}]} \
    -q${qpHdr[${set_nro}]} \
    -n${qpMin[${set_nro}]} \
    -m${qpMax[${set_nro}]} \
    -Q${chromaQpOffset[${set_nro}]} \
    -W${filterOffsetA[${set_nro}]} \
    -E${filterOffsetB[${set_nro}]} \
    -l${inputFormat[${set_nro}]} \
    -O${colorConversion[${set_nro}]} \
    -r${rotation[${set_nro}]} \
    -C${hrdConformance[${set_nro}]} \
    -c${cpbSize[${set_nro}]} \
    -S${sei[${set_nro}]} \
    -Z${stabilization[${set_nro}]} \
    -e${testId[${set_nro}]} \
    -N${burst} \
    -P$trigger \
    -R${byteStream[${set_nro}]}   
}

compare() {
    if cmp stream.h264 $case_dir/stream.h264; then
        echo "Case $case_nro OK"
        echo "E case_$case_nro;SW/HW Integration;;$date;OK;;$hwtag;$USER;;;$swtag;$systag"
    else
        echo "Case $case_nro FAILED"
        echo "E case_$case_nro;SW/HW Integration;;$date;Failed;;$hwtag;$USER;;;$swtag;$systag"
    fi
}
        

test_set() {
    # Test data dir
    let "set_nro=${case_nro}-${case_nro}/5*5"
    case_dir=$test_data_home/case_$case_nro

    # Do nothing if test case is not valid
    if [ ${valid[${set_nro}]} -eq -1 ]; then
        echo "case_$case_nro is not valid."
    else
        # Do nothing if test data doesn't exists
        #if [ ! -e $case_dir ]; then
        #    echo "Directory $case_dir doesn't exist!"
        #    echo "You must generate test data first using system model."
        #else
            # Invoke new shell
            (
            echo "========================================================="
            echo "Run case $case_nro"

            rm -f mb_control.bin rlc.bin stream.h264

            #echo "Input from directory $case_dir"

            # Links to reference ASIC output data
            #ln -s $case_dir/mb_control.bin .
            #ln -s $case_dir/rlc.bin .

            #rm -f "case_${case_nro}.time"
            #start_time=$(date +%s)
            #echo "START:${start_time}" >> "case_${case_nro}.time"
            
	    startTimeCounter "$case_nro"
            
            # Run encoder
            encode > encoder_h264.log
	    
	    endTimeCounter "$case_nro"
	    
	    #end_time=$(date +%s)
            #echo "END:${end_time}" >> "case_${case_nro}.time"
	    
            cat encoder_h264.log
	    
	    if [ -e random_run ]
	    then
	        mv stream.h264 random_cases/case_$case_nro.h264
		touch random_cases/run_${case_nro}_done
		mv case_${case_nro}.time random_cases/case_${case_nro}.time
	    else
                mv stream.h264 case_$case_nro.h264
		touch run_${case_nro}_done
            fi


            # Get encoder tag
            #swtag=`grep "sw625" encoder_h264.log  | awk '{print $2}'`
            #hwtag=`grep "0x625" encoder_h264.log  | awk '{print $3}'`
            #systag=`cat $case_dir/taginfo`

            # Make script run.sh for this testcase
            enc_bin="echo $enc_bin "
            encode > run_h264.sh
            chmod 777 run_h264.sh

            #echo "cmp stream.h264 $case_dir/stream.h264" >> run.sh
    
    
            # Compare stream to reference
            #compare

            )
        #fi
    fi
}

run_cases() {
    
    echo "Running test cases $first_case..$last_case"
    echo "This will take several minutes"
    echo "Output is stored in $resultfile.log and $resultfile.txt"
    rm -f $resultfile.log $resultfile.txt
    for ((case_nro=$first_case; case_nro<=$last_case; case_nro++))
    do
        . $test_case_list_dir/test_data_parameter_h264.sh "$case_nro"
        echo -en "\rCase $case_nro\t"
        test_set >> $resultfile.log

    done
    echo -e "\nAll done!"
    #grep "E case_" $resultfile.log > $resultfile.csv
    #grep "Case" $resultfile.log > $resultfile.txt
    #cat $resultfile.txt
}

run_case() {

    . $test_case_list_dir/test_data_parameter_h264.sh "$case_nro"
    test_set
}


# Encoder test set.
trigger=-1 # NO Logic analyzer trigger by default

case "$1" in
    all)
    first_case=1000;
    last_case=1999;
    run_cases
    ;;
    *)
    if [ $# -eq 3 ]; then trigger=$3; fi
    if [ $# -eq 1 ]; then
        case_nro=$1;
        run_case;
    else
        first_case=$1;
        last_case=$2;
        run_cases;
    fi
    ;;
esac



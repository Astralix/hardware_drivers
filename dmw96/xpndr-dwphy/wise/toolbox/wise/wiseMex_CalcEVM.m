function data = wiseMex_CalcEVM(x, T, data)
% data = wiseMex_CalcEVM(x, T, data)
%    Compute EVM for the baseband OFDM signal in x with sample period T

% Developed by Xinying (Cindy) Yu
% Copyright 2006 DSP Group, Inc. All rights reserved.

if nargin<1, error('Must supply a signal array'); end
if nargin<2, T = 1/80e6; end % default sample rate is 80 MHz

y = abs(x);  
k = find(y > 0.5*max(y));    % find signal within 6 dB of the peak
k = min(k):max(k);           % k indexes most of the packet
A=10^((12-30)/20)/std(x(k)); % gain to give a recieved signal of 12dBm power
x = A*x;                     % scale the input signal

%% in case the sample rate is not 80M, resample the waveform to 80M
if round(1/T) ~= 80e6,
    M = gcd(round(1/T),80e6);
	p = round(80e6/M);
	q = round(1/T/M);
	x = resample(y,p,q);
    T = 1/80e6;
end

wiParse_Line('wiPHY_SelectMethodByName("CalcEVM")'); % set the wise PHY method to be CalcEVM

PHY_RX_D = wiseMex('wiPHY_RX()',x); %#ok<NASGU>
data = CalcEVM_GetRxData;   % retrieve CalcEVM RX data

if data.Fault,             % if a fault occurs, limit the EVM to 0.0 dB
    data.EVMdB = 0.0;
    return;
end

if data.MixedMode,
    switch data.RATE,
        case 0, data.Mbps = 6.5;
        case 1, data.Mbps = 13;
        case 2, data.Mbps = 19.5;
        case 3, data.Mbps = 26;
        case 4, data.Mbps = 39;
        case 5, data.Mbps = 52;
        case 6, data.Mbps = 58.5;
        case 7, data.Mbps = 65;
        otherwise, data.Mbps = 0;              
    end
else
    switch data.RATE, %data rate in Mbps (computed from RATE)
        case bin2dec('1101'), data.Mbps =  6;
        case bin2dec('1111'), data.Mbps =  9;
        case bin2dec('0101'), data.Mbps = 12;
        case bin2dec('0111'), data.Mbps = 18;
        case bin2dec('1001'), data.Mbps = 24;
        case bin2dec('1011'), data.Mbps = 36;
        case bin2dec('0001'), data.Mbps = 48;
        case bin2dec('0011'), data.Mbps = 54;
        case bin2dec('1010'), data.Mbps = 72;
        otherwise, data.Mbps = 0;
    end
end

%% CalcEVM_GetRxData
function [data] = CalcEVM_GetRxData
%
%  Outputs: Elements of "data" Structure
%           Fault      -- error flag {0=no fault, 1=RATE/LENGTH error, 2 FramSync error, 3 SigDet error}
%           PSDU       -- byte stream from PHY to MAC including 8 header bytes;
%           h0         -- estimated channel response 
%           u0         -- phase corrector output arrays 
%           cSP,cCP    -- Sampling/carrier phase correction (one per symbol)
%           AdvDly     -- AdvDly pointer output from PLL, one per symbol
%           y0         -- Equalized observations (EVM equalization)
%           EVMdB      -- Error vector magnitude (dB)
%           W_EVMdB    -- Weighted EVM (dB) with subcarrier SNR
%           RATE       -- Decoded RATE field
%           LENGTH     -- Decoded LENGTH field
%           cEVMdB     -- Individual subcarrier EVMs (dB)
%           nEVMdB     -- Individual symbol EVMs (dB)
%           CFO        -- Estimated carrier frequency offset(cCFO+fCFO) (Hz)
%           N_SYM      -- Number of symbols in the packet;
%           CalcEVM_RX -- Receiver parameters for CalcEVM

%  Usage  : Returns data and receiver parameters generated by the CalcEVM module. Another function 
%           must cause CalcEVM to operate such as wiPHY_RX.

%   Developed by Xinying (Cindy) Yu Nov-06
%   Based on Dakota_GetRxData in BERLab by Barrett Brickner
%   Copyright 2004-2006 DSPG. All rights reserved.
%   CalcEVM only handles single path;

if(nargin),	error('This function does not take input arguments.');  end
[PSDU,h,Fault,u,AdvDly,cSP,cCP,EVMdB,y,RATE,LENGTH,N_SYM,cEVM,nEVM,cCFO,fCFO,W_EVMdB, UseMojaveRX,MixedMode] = wiseMex('CalcEVM_GetRxData()');

data.Fault       = Fault;
data.PSDU        = PSDU;
data.h0          = h; 
data.u0          = u;
data.y0          = y;
data.cSP         = cSP;
data.cCP         = cCP;
data.AdvDly      = AdvDly;
data.CFO         = cCFO+fCFO;
data.cCFO        = cCFO;
data.fCFO        = fCFO;
data.EVMdB       = EVMdB;
data.W_EVMdB     = W_EVMdB;
data.RATE        = RATE;
data.LENGTH      = LENGTH;
data.N_SYM       = N_SYM;
data.UseMojaveRX = UseMojaveRX;
data.MixedMode   = MixedMode;

if(N_SYM>0)
    data.cEVMdB = 10*log10(cEVM/N_SYM+1e-12);
else
    data.cEVMdB = zeros(64,1);
end
if(MixedMode)
    Nd =52;
else
    Nd =48;
end
if(N_SYM>0)
    data.nEVMdB = 10*log10(nEVM(1:N_SYM)/Nd+1e-12);
else
    data.nEVMdB = 0.0;
end
if(data.UseMojaveRX)
    data.W_EVMdB = NaN;
end
if(~data.UseMojaveRX)
    data.CalcEVM_RX=wiseMex('CalcEVM_GetRxParameters()');
end


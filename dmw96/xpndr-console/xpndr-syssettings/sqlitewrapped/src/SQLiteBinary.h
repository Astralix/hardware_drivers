#ifndef __CSQLITEBINARY_H_INCL__
#define __CSQLITEBINARY_H_INCL__

///
/// @file    	CSQLiteBinary.h
///
/// @brief		CCSQLiteBinary class' declaration
///
///				This type handles all r\w requests to binary data and stores 
/// 			buffers for data retreival.
///
/// @internal
///
/// @author  	Volodymyr Volkov
///
/// @date    	3/20/2008
///
/// @version 	1.0
///
///				Copyright (C) 2007-2008 DSP GROUP, INC.   All Rights Reserved
///

#ifdef SQLITEW_NAMESPACE
namespace SQLITEW_NAMESPACE {
#endif

///////////////////////////////////////////////////////////////////////////////
// Includes

///////////////////////////////////////////////////////////////////////////////
// Defines

///////////////////////////////////////////////////////////////////////////////
// Typedefs

///////////////////////////////////////////////////////////////////////////////
// Forward declarations

////////////////////////////////////////////////////////////////////////////////
// Prototypes for SQLite functions not included in SQLite DLL, but copied below
// from SQLite encode.c
////////////////////////////////////////////////////////////////////////////////
int sqlite3_encode_binary(const unsigned char *in, int n, unsigned char *out);
int sqlite3_decode_binary(const unsigned char *in, unsigned char *out);

///////////////////////////////////////////////////////////////////////////////
// General types

///////////////////////////////////////////////////////////////////////////////
/// @class  CSQLiteBinary
///
/// @brief  TBD 
///
///  		TBD
///
class CSQLiteBinary
{
public:
	///////////////////////////////////////////////////////////////////////////
	///	@brief	Constructor
	///			
	///			Constructs an instance of the CSQLiteBinary
	///
	CSQLiteBinary(Database* pDb, IError* pErr);

	///////////////////////////////////////////////////////////////////////////
	///	@brief	Destructor
	///			
	///			Destructs an instance of the CSQLiteBinary
	///
	virtual ~CSQLiteBinary();

public: 
	///////////////////////////////////////////////////////////////////////////
	//	Package scope types


public:
	///////////////////////////////////////////////////////////////////////////
	// Package scope methods

	void setBinary(const unsigned char* pBuf, int nLen);
	void setEncoded(const unsigned char* pBuf);

	const unsigned char* getEncoded();
	const unsigned char* getBinary();

	int getBinaryLength();

	unsigned char* allocBuffer(int nLen);

	void clear();

private:
	///////////////////////////////////////////////////////////////////////////
	// Private types


private:
	///////////////////////////////////////////////////////////////////////////
	// Private constants


private:
	///////////////////////////////////////////////////////////////////////////
	// Private methods

	void error(const char* strErrorMsg);

private:
	///////////////////////////////////////////////////////////////////////////
	// Private members

	Database* m_pDb;
	IError* m_pErrorHandler;

	unsigned char* mpBuf;
    int mnBinaryLen;
    int mnBufferLen;
    int mnEncodedLen;
    bool mbEncoded;

};

#ifdef SQLITEW_NAMESPACE
} // namespace SQLITEW_NAMESPACE {
#endif

///////////////////////////////////////////////////////////////////////////////

#endif // __CSQLITEBINARY_H_INCL__

///////////////////////////////////////////////////////////////////////////////

